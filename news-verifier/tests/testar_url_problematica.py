import requests
import json

BASE_URL = 'http://127.0.0.1:5000'

print("=" * 70)
print("üß™ TESTE COM URL PROBLEM√ÅTICA (STF)")
print("=" * 70)
print()

url_noticia = "https://g1.globo.com/politica/blog/valdo-cruz/post/2025/10/10/de-olho-na-eleicao-lula-vai-insistir-em-tributar-mais-bets-e-fintechs-para-acuar-oposicao.ghtml"

print(f"üì∞ URL: {url_noticia}")
print()
print("‚è≥ Processando... (pode demorar 60-90s)")
print()

dados = {
    "tipo": "url",
    "conteudo": url_noticia
}

try:
    response = requests.post(f'{BASE_URL}/api/verificar', json=dados, timeout=120)
    
    if response.status_code == 200:
        resultado = response.json()
        
        print("=" * 70)
        print("‚úÖ AN√ÅLISE CONCLU√çDA")
        print("=" * 70)
        print()
        
        print(f"üéØ VERACIDADE: {resultado['veracidade']}%")
        print()
        
        print(f"üì∞ T√çTULO:")
        print(f"   {resultado['titulo_analisado'][:80]}...")
        print()
        
        print("=" * 70)
        print("üîó VERIFICA√á√ÉO DE URLs")
        print("=" * 70)
        print()
        
        fontes = resultado.get('fontes_consultadas', [])
        
        if not fontes:
            print("‚ùå NENHUMA FONTE ENCONTRADA!")
        else:
            print(f"‚úÖ {len(fontes)} fontes encontradas")
            print()
            
            urls_completas = 0
            urls_truncadas = 0
            
            for i, fonte in enumerate(fontes[:10], 1):
                url = fonte.get('url', '')
                tamanho = len(url)
                
                # Verificar se URL est√° completa
                completa = url.startswith('http') and tamanho > 50
                
                if completa:
                    urls_completas += 1
                    status = "‚úÖ"
                else:
                    urls_truncadas += 1
                    status = "‚ùå"
                
                print(f"{i}. {status} {fonte['nome']} - {tamanho} caracteres")
                print(f"   Similaridade: {fonte['similaridade']:.4f}")
                print(f"   URL: {url}")
                print(f"   T√≠tulo: {fonte['titulo'][:60]}...")
                print()
            
            print("=" * 70)
            print(f"üìä RESULTADO:")
            print(f"   ‚úÖ URLs completas: {urls_completas}")
            print(f"   ‚ùå URLs truncadas: {urls_truncadas}")
            print("=" * 70)
            
            if urls_truncadas > 0:
                print()
                print("‚ö†Ô∏è  AINDA H√Å URLs TRUNCADAS!")
                print("   Vamos investigar mais...")
            else:
                print()
                print("üéâ TODAS AS URLs EST√ÉO COMPLETAS!")
    
    else:
        print(f"‚ùå ERRO {response.status_code}:")
        print(json.dumps(response.json(), indent=2, ensure_ascii=False))

except requests.exceptions.Timeout:
    print("‚è±Ô∏è  TIMEOUT - Requisi√ß√£o demorou mais de 120s")

except Exception as e:
    print(f"‚ùå ERRO: {e}")